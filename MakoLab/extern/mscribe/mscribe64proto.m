function [methodinfo,structs,enuminfo,ThunkLibName]=mscribe64proto
%MSCRIBE64PROTO Create structures to define interfaces found in 'armdll32'.

%This function was generated by loadlibrary.m parser version 1.1.6.37 on Tue May 12 14:59:31 2015
%perl options:'armdll32.i -outfile=mscribe64proto.m -thunkfile=armdll64_thunk_pcwin64.c -header=armdll32.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'armdll64_thunk_pcwin64');
%  int __stdcall ArmStart ( HWND hwndParent ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmStart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HWND__Ptr'};fcnNum=fcnNum+1;
%  void __stdcall ArmEnd ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ArmEnd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int __stdcall ArmConnectSN ( int port , long baud , char * serialNumber ); 
fcns.thunkname{fcnNum}='int32int32longcstringThunk';fcns.name{fcnNum}='ArmConnectSN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'long', 'cstring'};fcnNum=fcnNum+1;
%  int __stdcall ArmConnect ( int port , long baud ); 
fcns.thunkname{fcnNum}='int32int32longThunk';fcns.name{fcnNum}='ArmConnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'long'};fcnNum=fcnNum+1;
%  void __stdcall ArmDisconnect ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ArmDisconnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int __stdcall ArmReconnect ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='ArmReconnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int __stdcall ArmSetBckgUpdate ( int type ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ArmSetBckgUpdate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int __stdcall ArmSetUpdate ( int type ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ArmSetUpdate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void * __stdcall ArmGetArmRec ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='ArmGetArmRec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void __stdcall ArmSetLengthUnits ( int type ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='ArmSetLengthUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void __stdcall ArmSetAngleUnits ( int type ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='ArmSetAngleUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void __cdecl arm_calc_stylus_3DOF ( arm_rec * arm ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='arm_calc_stylus_3DOF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'arm_recPtr'};fcnNum=fcnNum+1;
%  void __cdecl arm_calc_joints ( arm_rec * arm ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='arm_calc_joints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'arm_recPtr'};fcnNum=fcnNum+1;
%  void __cdecl arm_calc_params ( arm_rec * arm ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='arm_calc_params'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'arm_recPtr'};fcnNum=fcnNum+1;
%  int __stdcall ArmSetUpdateEx ( int type , UINT minUpdatePeriodms ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='ArmSetUpdateEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
%  void __stdcall ArmCustomTip ( float delta ); 
fcns.thunkname{fcnNum}='voidfloatThunk';fcns.name{fcnNum}='ArmCustomTip'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetTipPosition ( length_3D * pPosition ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmGetTipPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'length_3DPtr'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetTipOrientation ( angle_3D * pAngles ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmGetTipOrientation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'angle_3DPtr'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetTipOrientationUnitVector ( angle_3D * pOrientationUnitVector ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmGetTipOrientationUnitVector'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'angle_3DPtr'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetProductName ( char * szProductName , UINT uiBufferLength ); 
fcns.thunkname{fcnNum}='int32cstringuint32Thunk';fcns.name{fcnNum}='ArmGetProductName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint32'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetSerialNumber ( char * szSerialNumber , UINT uiBufferLength ); 
fcns.thunkname{fcnNum}='int32cstringuint32Thunk';fcns.name{fcnNum}='ArmGetSerialNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint32'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetModelName ( char * szModelName , UINT uiBufferLength ); 
fcns.thunkname{fcnNum}='int32cstringuint32Thunk';fcns.name{fcnNum}='ArmGetModelName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint32'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetVersion ( char * szArmDllVersionNumber , char * szFirmwareVersionNumber , UINT uiBufferLength ); 
fcns.thunkname{fcnNum}='int32cstringcstringuint32Thunk';fcns.name{fcnNum}='ArmGetVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'uint32'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetNumButtons ( int * piNumButtons ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmGetNumButtons'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetButtonsState ( DWORD * pdwButtonsState ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmGetButtonsState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetDeviceStatus ( device_status * pDeviceStatus ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmGetDeviceStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'device_statusPtr'};fcnNum=fcnNum+1;
%  int __stdcall ArmSetErrorHandlerFunction ( int iErrorType , PERRORHANDLER pErrorHandlerFunction ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ArmSetErrorHandlerFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'FcnPtr'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetNumDOF ( int * piNumDOF ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmGetNumDOF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetEncoderCount ( int * piEncoderValues ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmGetEncoderCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetJointAngles ( int iUnitID , angle * piJointAngle ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ArmGetJointAngles'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
%  int __stdcall ArmSetHomeEncoderOffset ( int * piEncoderOffsets ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmSetHomeEncoderOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  int __stdcall ArmSetTipPositionOffset ( int iUnitID , length Xoffset , length Yoffset , length ZOffset ); 
fcns.thunkname{fcnNum}='int32int32lengthlengthlengthThunk';fcns.name{fcnNum}='ArmSetTipPositionOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single', 'single', 'single'};fcnNum=fcnNum+1;
%  int __stdcall ArmSetSoftHome (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ArmSetSoftHome'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int __stdcall ArmGetFullTip ( length_3D * pPosition , angle_3D * vecT0 , angle_3D * vecT1 , angle_3D * vecT2 , DWORD * pdwButtonsState ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ArmGetFullTip'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'length_3DPtr', 'angle_3DPtr', 'angle_3DPtr', 'angle_3DPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __stdcall ArmSetTipProfile ( int _tipNumber ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ArmSetTipProfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetTipProfile ( int * _tipNumber ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmGetTipProfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  int __stdcall ArmSaveTipProfile ( int _tipNumber , int * _homeDelta , float * _tipOffset , char * _name ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='ArmSaveTipProfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'singlePtr', 'cstring'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetTipProfileHomeOffset ( int _tipNumber , int * _homeDelta ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ArmGetTipProfileHomeOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetTipProfilePositionOffset ( int _tipNumber , float * _tipOffset ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ArmGetTipProfilePositionOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
%  int __stdcall ArmGetTipNameData ( int _tipNumber , char * _name ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='ArmGetTipNameData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
%  int __stdcall ArmGenerateTipPositionOffset ( length_3D * _points , angle_3D * _orientations , int _numPoints , length_3D _offset ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32length_3DThunk';fcns.name{fcnNum}='ArmGenerateTipPositionOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'length_3DPtr', 'angle_3DPtr', 'int32', 'length_3D'};fcnNum=fcnNum+1;
%  int __stdcall ArmGenerateTipPositionOffsetEx ( length_3D * _points , angle_3D * _orientations , int _numPoints , length_3D _offset , angle_3D * _unitOrientations ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32length_3DvoidPtrThunk';fcns.name{fcnNum}='ArmGenerateTipPositionOffsetEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'length_3DPtr', 'angle_3DPtr', 'int32', 'length_3D', 'angle_3DPtr'};fcnNum=fcnNum+1;
structs.HWND__.members=struct('unused', 'int32');
structs.length_3D.packing=1;
structs.length_3D.members=struct('x', 'single', 'y', 'single', 'z', 'single');
structs.angle_3D.packing=1;
structs.angle_3D.members=struct('x', 'single', 'y', 'single', 'z', 'single');
structs.packet_rec.packing=1;
structs.packet_rec.members=struct('parsed', 'int32', 'error', 'int32', 'num_bytes_needed', 'int32', 'cmd_byte', 'uint8', 'data', 'uint8#42', 'data_ptr', 'uint8Ptr');
structs.device_status.packing=1;
structs.device_status.members=struct('status', 'ulong', 'Baud', 'uint32', 'PortNumber', 'uint32');
structs.hci_rec.packing=1;
structs.hci_rec.members=struct('port_num', 'int32', 'baud_rate', 'long', 'slow_timeout', 'single', 'fast_timeout', 'single', 'packet', 'packet_rec', 'packets_expected', 'int32', 'marker', 'int32', 'marker_updated', 'int32', 'buttons', 'int32', 'button', 'int32#7', 'timer', 'long', 'analog', 'int32#8', 'encoder', 'int32#7', 'button_supported', 'int32#7', 'max_timer', 'int32', 'max_analog', 'int32#8', 'max_encoder', 'int32#7', 'timer_updated', 'int32', 'analog_updated', 'int32#8', 'encoder_updated', 'int32#7', 'home_pos', 'int32#7', 'home_ref', 'int32#7', 'serial_number', 'int8#32', 'product_name', 'int8#32', 'product_id', 'int8#32', 'model_name', 'int8#32', 'comment', 'int8#32', 'param_format', 'int8#32', 'version', 'int8#32', 'error0', 'voidPtr', 'error1', 'voidPtr', 'error2', 'voidPtr', 'error3', 'voidPtr', 'error4', 'voidPtr', 'error5', 'voidPtr', 'error6', 'voidPtr', 'error7', 'voidPtr', 'error8', 'voidPtr', 'error9', ' hci_result (* default_handler )()', 'user_data', 'long');
structs.arm_rec.packing=1;
structs.arm_rec.members=struct('stylus_tip', 'length_3D', 'stylus_dir', 'angle_3D', 'T', 'single#16', 'endpoint', 'length_3D#6', 'joint_rad', 'single#6', 'joint_deg', 'single#6', 'len_units', 'cstring', 'ang_units', 'cstring', 'ang_format', 'cstring', 'D', 'single#6', 'A', 'single#6', 'ALPHA', 'single#6', 'BETA', 'single', 'JOINT_RADIANS_FACTOR', 'single#6', 'JOINT_DEGREES_FACTOR', 'single#6', 'M', 'single#16#6', 'cs', 'single#6', 'sn', 'single#6', 'csALPHA', 'single#6', 'snALPHA', 'single#6', 'timer_report', 'int32', 'anlg_reports', 'int32', 'num_points', 'int32', 'error0', ' void (* packet_calc_fn )( struct arm_rec *)', 'hci', 'hci_rec', 'param_block', 'uint8#40', 'p_block_size', 'int32', 'ext_param_block', 'uint8#10', 'ext_p_block_size', 'int32', 'pt2ptdist', 'single', 'lastX', 'single', 'lastY', 'single', 'lastZ', 'single', 'D5Point', 'single');
methodinfo=fcns;
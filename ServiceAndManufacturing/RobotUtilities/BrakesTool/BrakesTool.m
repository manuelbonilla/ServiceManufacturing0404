function guiHandles=BrakesTool(hgs,varargin)
%brakesTool Gui to apply and release joint brakes
%
% Syntax:
%   brakesTool(hgs)
%
% Notes:
%
% See also:
%   hgs_robot
%

%
% $Author: jforsyth $
% ERROR: date, time not autogenerated

if nargin<1
    setenv ROBOT_HOST 172.16.16.100
    targetName = getenv('ROBOT_HOST');
    
else
    targetName = hgs.host;
end

hgs = connectRobotGui;

global joint;
global block;
global JOINT_GRAVITY_NOMINAL;
joint = 0;
block = 0;
otherModes = 3;

% Setup Script Identifiers for generic GUI
guiHandles = generateMakoGui('Brake Tool',[],hgs);
log_message(hgs,'Brake Tool Started');

%check homing is done
if(~hgs.homing_done)
    presentMakoResults(guiHandles,'FAILURE',...
        'Homing not done');
    log_results(hgs,guiHandles.scriptName,'FAIL','Test failed: homing not done');
    return
end


% display CRISIS version number
uicontrol(guiHandles.uiPanel,...
    'Style','text',...
    'String',sprintf('Arm Software version: %s',cell2mat(comm(hgs,'version_info'))),...
    'Units','normalized',...
    'Background',[.6 .6 .6],...
    'HorizontalAlignment','center',...
    'FontUnits','normalized',...
    'FontSize',0.5,...
    'Position',[ .05 .875 .9 .075]...
    ); %#ok<AGROW>

% enable
set(guiHandles.mainButtonInfo,'Enable','on');


% Setup boundaries for input boxes
xMin = 0.1;
xRange = 0.8;
yMin = 0.25;
yRange = 0.15;
spacing = 0.02;

%define the common properties for all uicontrol
commonBoxProperties = struct(...
    'Units','Normalized',...
    'FontWeight','bold',...
    'FontUnits','normalized',...
    'SelectionHighlight','off',...
    'Enable','Inactive');

%set degree of freemdom parameters
meDof = hgs.ME_DOF;
jeDof = hgs.JE_DOF;
dof = max([meDof,jeDof]);

% store current joint gravity weights
JOINT_GRAVITY_NOMINAL = ones(1,dof);

%add pushbuttons to show gravity weights
%disable until the maininfobutton is pressed
for indx=1:meDof
    boxPosition = [xMin+(xRange+spacing)*(indx-1)/dof,...
        yMin+spacing,...
        xRange/dof-spacing,...
        yRange];
    meBox(indx) = uicontrol(guiHandles.uiPanel,...
        commonBoxProperties,...
        'Style','pushbutton',...
        'Position',boxPosition,...
        'FontSize',0.3,'String',num2str(indx),...
        'Enable','on','BackgroundColor','white',...
        'Callback',@rangeCheckBox); %#ok<AGROW>
end

strMode = {'FREE','Haptic Holster','BRAKES'};

yMin = yMin + .3;
for indx=1:otherModes
    boxPosition = [xMin+((xRange+spacing)*(1.5)/dof)+(xRange+spacing)*(indx-1)/dof,...
        yMin+spacing,...
        xRange/dof-spacing,...
        yRange];
    meBox(meDof+indx) = uicontrol(guiHandles.uiPanel,...
        commonBoxProperties,...
        'Style','pushbutton',...
        'Position',boxPosition,...
        'FontSize',0.3,'String',strMode(indx),...
        'Enable','on','BackgroundColor','white',...
        'Callback',@rangeCheckBox); %#ok<AGROW>
end

% Now setup the callback to allow user to press and start the test
updateMainButtonInfo(guiHandles,@updateProcedureCallback);

%--------------------------------------------------------------------------
% Internal function to start test
%--------------------------------------------------------------------------
    function updateProcedureCallback(varargin)
        tmpStr = sprintf(['Select Joint to ENABLE']);
        updateMainButtonInfo(guiHandles,'text', tmpStr);
        updateMainButtonInfo(guiHandles,@toggle_button);
        set(guiHandles.figure,'CloseRequestFcn',@brakeTool_exit);
    end


%--------------------------------------------------------------------------
% internal function: handling button
%--------------------------------------------------------------------------
    function rangeCheckBox(varargin)
        
        try
            if hgs.arm_status ~= 1
                if ~robotFrontPanelEnable(hgs,guiHandles)
                    % log the failure of the procedure
                    % log_message(hgs,'failed to enable robotic arm.');
                    return;
                end
            end
        catch
            % do nothing.
        end
        
        for i = 1:dof+otherModes
            set(meBox(i),...
                'BackgroundColor','white');
            if(get(meBox(i),'Value')==1)
                set(meBox(i),...
                    'BackgroundColor','green');
                if(i<=dof)
                    joint = i;
                    
                elseif(i==dof+1)
                    joint = -1;
                    
                elseif(i==dof+2)
                    joint = 0;
                    
                elseif(i==dof+3)
                    joint = dof*10; % force halt
                    
                end
                
            end
        end
        
        if(~block)
            
            
            % prepare to start test
            % check for special brakes modes
            if(joint == -1 || joint == 0 || joint >= 7)
                % if different set the gravity comp constants to nominal
                if(sum(hgs.GRAV_COMP_WEIGHTS==JOINT_GRAVITY_NOMINAL)~=dof)
                    tmpStr = sprintf(['Joint Gravity requires update, Restarting CRISIS..' ]);
                    updateMainButtonInfo(guiHandles,'text', tmpStr);
                    nominal_joint_gravity;
                end
                if(joint == -1)
                    % free
                    mode(hgs,'zerogravity','ia_hold_enable',0);
                elseif(joint == 0)
                    % haptic holster
                    mode(hgs,'zerogravity','ia_hold_enable',1);
                elseif(joint >= 7)
                    % engage all brakes
                    mode(hgs,'stop');
                end
            
            else
                % release one joint and engage all other brakes
                tmpStr = sprintf(['Joint Gravity requires update, Restarting CRISIS..' ]);
                updateMainButtonInfo(guiHandles,'text', tmpStr);
                zero_joint_gravity(joint);
                
                % reset mode with zerogravity (no haptic holster)
                mode(hgs,'zerogravity','ia_hold_enable',0);
                
                start_position = hgs.joint_angles;
                end_position = hgs.joint_angles;
                
                %PID parameters
                KDS.V2_1= [10.00, 40.00, 35.00, 30.00, 0.75, 3.0];
                KPS.V2_1= [3800.0, 20000.0, 8000.00, 2000.00, 400.00, 800.0];
                KI=zeros(1,6);
                KD=KDS.V2_1;
                KP=KPS.V2_1;
                
                max_velocity = 0.2000;
                
                %start frcition parameter module
                mode(hgs,'friction_parameter',...
                    'start_point',start_position,...
                    'end_point',end_position,...
                    'KP',KP,...
                    'KD',KD,...
                    'KI',KI,...
                    'velocity_max',max_velocity,...
                    'joint_number',joint-1);
                
                
            end
        end
        block = 0;
        
        % Now setup the focus to main button
        uicontrol(guiHandles.mainButtonInfo);
        tmpStr = sprintf(['Mainbutton (spacebar key) = BRAKES']);
        updateMainButtonInfo(guiHandles,'text', tmpStr,'pushbutton');
        
        
        
    end


%--------------------------------------------------------------------------
% internal function: revert gravity for a single joint
%--------------------------------------------------------------------------

    function nominal_joint_gravity
        
        % zero out gravity comp on joint of interest
        hgs.GRAV_COMP_WEIGHTS = JOINT_GRAVITY_NOMINAL;
        % restart CRISIS
        restartCRISIS(hgs);
        
        pause(8);
        
        % reconnect
        if nargin<1
            setenv ROBOT_HOST 172.16.16.100
            targetName = getenv('ROBOT_HOST');
            
        else
            targetName = hgs.host;
        end
        hgs = connectRobotGui;
        
        try
            if hgs.arm_status ~= 1
                if ~robotFrontPanelEnable(hgs,guiHandles)
                    % log the failure of the procedure
                    % log_message(hgs,'failed to enable robotic arm.');
                    return;
                end
            end
        catch
            % do nothing.
        end
        
        
    end

%--------------------------------------------------------------------------
% internal function: zero gravity for a single joint
%--------------------------------------------------------------------------

    function zero_joint_gravity(joint)
        
        % zero out gravity comp on joint of interest
        hgs.GRAV_COMP_WEIGHTS = JOINT_GRAVITY_NOMINAL;
        hgs.GRAV_COMP_WEIGHTS(joint)=0;
        % restart CRISIS
        restartCRISIS(hgs);
        pause(8);
        % reconnect
        if nargin<1
            setenv ROBOT_HOST 172.16.16.100
            targetName = getenv('ROBOT_HOST');
            
        else
            targetName = hgs.host;
        end
        hgs = connectRobotGui;
        
        try
            if hgs.arm_status ~= 1
                if ~robotFrontPanelEnable(hgs,guiHandles)
                    % log the failure of the procedure
                    % log_message(hgs,'failed to enable robotic arm.');
                    return;
                end
            end
        catch
            % do nothing.
        end
        
        
    end


%--------------------------------------------------------------------------
% internal function: close GUI, overide the default exit button callback
%--------------------------------------------------------------------------
    function brakeTool_exit(varargin)
        log_message(hgs,'Brake Tool closed');
        %set phasing cancel flag
        isProcedureCanceled=true;
        try
            if(sum(hgs.GRAV_COMP_WEIGHTS==JOINT_GRAVITY_NOMINAL)~=dof)
                tmpStr = sprintf(['Joint Gravity requires update, Restarting CRISIS..' ]);
                updateMainButtonInfo(guiHandles,'text', tmpStr);
                % set the gravity comp constants to nominal
                nominal_joint_gravity;
            end
            % haptic holster
            mode(hgs,'zerogravity','ia_hold_enable',1);
        catch it
            it.message
            
        end
        closereq;
    end


%--------------------------------------------------------------------------
% internal function: close GUI, overide the default exit button callback
%--------------------------------------------------------------------------
    function toggle_button(varargin)
        
        % engage all brakes
        mode(hgs,'stop');
        
        for i = 1:dof+otherModes
            set(meBox(i),...
                'BackgroundColor','white');
        end
        set(meBox(dof+3),...
            'BackgroundColor','green');
        
        
        
    end

end
%
%
% --------- END OF FILE ----------

function guiHandles=BurrStatusCheck(hgs,varargin)
%BurrStatusCheck Gui to check software and hardware of handpiece, pedal, and anspach motor
%
% Syntax:
%   BurrStatusCheck(hgs)
%
% Notes:
%   This script will prompt the user to press the handpiece, the user has
%   30 seconds to press it.  Once a burr speed greater than 0 is detected,
%   it checks that the burr speed is 75% of the maximum RPM.  If so, it
%   passes, if the speed is less than this level, a warning is displayed.
%   Next, the same check is done for the foot pedal.
%
% See also:
%   hgs_robot
%

%
% $Author: jforsyth $
% ERROR: date, time not autogenerated

% Checks for arguments if any.  If none connect to the default robot
defaultRobotConnection = false;

% initialize real data collection
realData = 1;

if nargin<1
    hgs = connectRobotGui;
    if isempty(hgs)
        guiHandles='';
        return;
    end
    
    % maintain a flag to establish that this connection was done by this
    % script
    defaultRobotConnection = true;
elseif(nargin > 1 && strcmp(varargin(1),'simulate'))
    hgs = [];
    realData = 0;
end

if(realData)
    log_message(hgs,sprintf(['Burr Status Check Started ']));
else
    % skip log
end

testIndex = 0;
runTest = [1 1];
ind = find(runTest);

% determine last test index
if(isempty(ind))
    lastTest = 0;
else
    lastTest = max(ind);
end

if nargin>1
    testIndex = index-1;
end

% Setup Script Identifiers for generic GUI
guiHandles = generateMakoGui('Burr Status Check',[],hgs,false);

% Setup the main function
set(guiHandles.mainButtonInfo,'CallBack',@updateProcedureCallback);

%override the default close callback for clean exit.
set(guiHandles.figure,'CloseRequestFcn',@burrcheck_close);

if(realData)
    %check homing is done
    if(~hgs.homing_done)
        presentMakoResults(guiHandles,'FAILURE',...
            'Homing not done');
        log_message(hgs,sprintf(['Burr Status Check failed (homing not done) ']),...
            'ERROR');
        return
    end
else
    % skip homing check
end

% Disable during setup
set(guiHandles.mainButtonInfo,'Enable','off');

% Thresholds
GRAV_MODE_MOTION_LIMIT = 0.05; %m
maxRPM = 0;
nominalRPM = 80000;
requiredRPM = nominalRPM*0.75;
minStartRPM = nominalRPM*0.1;
requiredTriggerTime = 5;
timeoutHold = 10;
PRESSED = 0;
RELEASED = 1;

if(~realData)
    SKIP = 0;
    NO_START = 1;
    STARTED_SLOW = 2;
    STARTED = 3;
    
    hand = STARTED;
    foot = STARTED;
    % set simulate parameters
    if(hand == SKIP)
        simulate.hand.startRPM = minStartRPM*0.9;
        simulate.hand.runRPM = requiredRPM*1.1;
    elseif(hand == NO_START)
        simulate.hand.startRPM = minStartRPM*0.9;
        simulate.hand.runRPM = requiredRPM*1.1;
    elseif(hand == STARTED_SLOW)
        simulate.hand.startRPM = minStartRPM*1.1;
        simulate.hand.runRPM = requiredRPM*0.9;
    else
        simulate.hand.startRPM = minStartRPM*1.1;
        simulate.hand.runRPM = requiredRPM*1.1;
    end
    if(foot == SKIP)
        simulate.foot.pedal = RELEASED;
        simulate.foot.startRPM = minStartRPM*1.1;
        simulate.foot.runRPM = requiredRPM*1.1;
    elseif(foot == NO_START)
        simulate.foot.pedal = RELEASED;
        simulate.foot.startRPM = minStartRPM*1.1;
        simulate.foot.runRPM = requiredRPM*1.1;
    elseif(foot == STARTED_SLOW)
        simulate.foot.pedal = PRESSED;
        simulate.foot.startRPM = minStartRPM*1.1;
        simulate.foot.runRPM = requiredRPM*0.9;
    else
        simulate.foot.pedal = PRESSED;
        simulate.foot.startRPM = minStartRPM*1.1;
        simulate.foot.runRPM = requiredRPM*1.1;
    end
end

%flag
footFlag = false;
handFlag = false;
passedTest = false;
triggered = false;
skipAnspach = false;
skipFootpedal = false;
isProcedureCanceled = false;

%var
numTries = 1;
triggeredTime = 0;

%constants
PASS = 1;
FAILURE = 0;
SKIP = -2;
WARNING = -2;

if(realData)
    % get arm hardware version
    armHardwareVersion=hgs.ARM_HARDWARE_VERSION;
else
    armHardwareVersion = 3.0;
end

% Setup Test paramters.  These are a structure in the format
testParamFields = {'TestName','TestFunction'};

if(realData)
    %This is for backward compatability
    if(strcmp(hgs.PERIPHERAL_SYSTEM,'pcm_anspach')==1)
        log_message(hgs,sprintf(['anpach: pcm_anspach ']));
        peripheral_hand='ASP_BURR_HAND';
        peripheral_foot='ASP_BURR_FOOT';
        peripheral_drip_switch='ASP_DRIP_SWITCH';
    else
        log_message(hgs,sprintf(['anpach: non-pcm_anspach ']));
        peripheral_hand='CUTTER_BURR_HAND';
        peripheral_foot='CUTTER_BURR_FOOT';
        peripheral_drip_switch='CUTTER_DRIP_SWITCH';
    end
else
    % skip periph system check
end

tool = {'handpiece','footpedal'};

switch int32(armHardwareVersion * 10 + 0.05)
    case 20 % 2.0
        testParams = {...
            'Handpiece Check',@handpieceCheck;...
            'Footpedal Check',@footpedalCheck;...
            };
    case 21 % 2.1
        testParams = {...
            'Handpiece Check',@handpieceCheck;...
            'Footpedal Check',@footpedalCheck;...
            };
    case 22 % 2.2
        testParams = {...
            'Handpiece Check',@handpieceCheck;...
            'Footpedal Check',@footpedalCheck;...
            };
    case 23 % 2.3
        testParams = {...
            'Handpiece Check',@handpieceCheck;...
            'Footpedal Check',@footpedalCheck;...
            };
    case 30 % 3.0
        testParams = {...
            'Handpiece Check',@handpieceCheck;...
            'Footpedal Check',@footpedalCheck;...
            };
    otherwise
        presentMakoResults(guiHandles,'FAILURE',...
            sprintf('Invalid hardware version %.1f',armHardwareVersion));
        return
end

testParamStruct = cell2struct(testParams,testParamFields,2);

% General constants
RIGHTY_SURGICAL_POSE = [pi/2 -pi/2 -pi/2 pi/2 pi 0];
LEFTY_SURGICAL_POSE = [-pi/2 -pi/2 pi/2 pi/2 0 pi];

if(realData)
    % gather required data from arm
    endEffectorTransform = eye(4);
    endEffectorTransform(1:3,4) = hgs.CALIB_BALL_A';
else
    % skip end effector transform
end

% Generate the GUI
% Automatically setup the list to be tested.  Stack them in
% 3 columns

% determine number of columns and appropriate spacing for them
numRows = 16;

for i=1:length(testParamStruct) %#ok<FXUP>
    cellLocation = [mod(i-1,numRows),floor((i-1)/numRows)];
    boxPos = [0.05+0.5*cellLocation(2),...
        .01+0.05*(numRows-cellLocation(1)),0.4,0.04];
    
    testParamStruct(i).textHandle = uicontrol(guiHandles.uiPanel,...
        'Style','text',...
        'String',testParamStruct(i).TestName,...
        'Units','normalized',...
        'HorizontalAlignment','left',...
        'FontUnits','normalized',...
        'FontSize',0.7,...
        'Position',boxPos...
        ); %#ok<AGROW>
    
    % preset the result to test not performed
    testParamStruct(i).results = SKIP;
    testParamStruct(i).failureMsg = '';
    testParamStruct(i).warningMsg = '';
    testParamStruct(i).testComplete = false;
end

boxPosition = [0.35 0.3 0.3 0.05];

% generate a region to show progress
dispAxis = axes(...
    'Parent',guiHandles.uiPanel,...
    'Color','white',...
    'Position',boxPosition,...
    'XLim',[0 1],...
    'YLim',[0 1],...
    'Box','on',...
    'ytick',[],...
    'xtick',[] );

% Generate the required patches for joint in range status
progressBar = patch(...
    'Parent',dispAxis,...
    'XData',[0 0 0 0],...
    'YData',[0 0 1 1],...
    'FaceColor','blue'...
    );

% txt for progress bar
progressTxt = uicontrol(guiHandles.uiPanel,...
    'Style','text',...
    'Units','normalized',...
    'Position',boxPosition + [0 .1 0 0],...
    'FontUnits','normalized',...
    'FontSize',0.8,...
    'HorizontalAlignment','center',...
    'String','Progress');

% Show status indicator to show Anspach communication
% for simplicity show only RPM
anspachStatus = uicontrol(guiHandles.uiPanel,...
    'Style','text',...
    'Units','normalized',...
    'Position',[0.1 0.5 0.8 0.1],...
    'FontUnits','normalized',...
    'FontSize',0.4,...
    'HorizontalAlignment','left',...
    'String','Anspach Status');

setStatusOff();
setProgressOff();

if(realData)
    % display CRISIS version number
    uicontrol(guiHandles.uiPanel,...
        'Style','text',...
        'String',sprintf('Arm Software version: %s',cell2mat(comm(hgs,'version_info'))),...
        'Units','normalized',...
        'HorizontalAlignment','center',...
        'FontUnits','normalized',...
        'FontSize',0.5,...
        'Position',[ .05 .875 .9 .075]...
        ); %#ok<AGROW>
else
    % skip version display
end

% enable
set(guiHandles.mainButtonInfo,'Enable','on');

timerObj=timer;

%--------------------------------------------------------------------------
% Internal function to start test
%--------------------------------------------------------------------------
    function updateProcedureCallback(varargin)
        % preparre to start test
        if(runTest(testIndex+1))
            updateMainButtonInfo(guiHandles,'pushbutton',...
                sprintf('Click to start %s test',testParamStruct(testIndex+1).TestName),...
                @ArmSoftwareTestProcedure);
        elseif( (testIndex) == lastTest)
            resultsCallback;
        else
            testIndex = testIndex + 1;
            updateProcedureCallback;
        end
    end
%--------------------------------------------------------------------------
% Internal function to end test
%--------------------------------------------------------------------------

    function resultsCallback(varargin)
        try
            % Tests are complete analyse results
            resultString = {};
            for i=1:length(testParamStruct) %#ok<FXUP>
                % check if all tests were complete
                if testParamStruct(i).results==SKIP
                    resultString{end+1} = sprintf('%s warning: %s',...
                        testParamStruct(i).TestName,testParamStruct(i).warningMsg); %#ok<AGROW>
                elseif testParamStruct(i).results==FAILURE
                    resultString{end+1} = sprintf('%s failure: %s',...
                        testParamStruct(i).TestName,testParamStruct(i).failureMsg); %#ok<AGROW>
                elseif testParamStruct(i).results==PASS
                    % do nothing
                elseif testParamStruct(i).results==WARNING
                    resultString{end+1} = sprintf('%s warning: %s',...
                        testParamStruct(i).TestName,testParamStruct(i).warningMsg); %#ok<AGROW>
                end
                if(realData)
                    log_message(hgs,sprintf(['Burr Status Tool (%i): %i '],i,testParamStruct(i).results));
                end
            end
            
            if all([testParamStruct(:).results]==FAILURE)
                % 'All Fail'
                presentMakoResults(guiHandles,'FAILURE',...
                    resultString);
                if(realData)
                    log_message(hgs,sprintf(['Burr Status Check Failure (speed)']),'ERROR');
                end
            elseif all([testParamStruct(:).results]==SKIP)
                % 'All Skipped'
                presentMakoResults(guiHandles,'FAILURE',...
                    resultString);
                if(realData)
                    log_message(hgs,sprintf(['Burr Status Check Failure (all test skipped) ']),'ERROR');
                end
            elseif(all([testParamStruct(:).results] == WARNING))
                % 'All warnings'
                presentMakoResults(guiHandles,'FAILURE',...
                    resultString);
                if(realData)
                    log_message(hgs,sprintf(['Burr Status Check warnings (speed) ']),'WARNING');
                end
            elseif(all([testParamStruct(:).results] == PASS))
                % 'All Pass'
                presentMakoResults(guiHandles,'SUCCESS',...
                    resultString);
                if(realData)
                    log_message(hgs,sprintf(['Burr Status Check Success ']));
                end
            elseif(any([testParamStruct(:).results] == WARNING))
                % 'At least one Slow'
                presentMakoResults(guiHandles,'WARNING',...
                    resultString);
                if(realData)
                    log_message(hgs,sprintf(['Burr Status Check Warning (1 or more pass slow) ']),...
                        'WARNING');
                end
            elseif(any([testParamStruct(:).results] == SKIP))
                % 'At least one skipped'
                presentMakoResults(guiHandles,'WARNING',...
                    resultString);
                if(realData)
                    log_message(hgs,sprintf(['Burr Status Check Warning (1 or more tests skipped) ']),...
                        'WARNING');
                end
            else
                % 'All fail or skip, or other'
                presentMakoResults(guiHandles,'FAILURE',...
                    resultString);
                if(realData)
                    log_message(hgs,sprintf(['Burr Status Check failure ']));
                end
            end
            
        catch erm
            f = errordlg(erm.message, 'Error Dialog');
        end
        
    end
%--------------------------------------------------------------------------
% Internal function to change test
%--------------------------------------------------------------------------
    function ArmSoftwareTestProcedure(varargin)
        
        % set mainbutton to text
        set(guiHandles.mainButtonInfo,'style','text');
        
        % increment testIndex
        testIndex = testIndex+1;
        
        if(runTest(testIndex))
            
            % change the weight of the test running
            set(testParamStruct(testIndex).textHandle,...
                'fontweight','bold')
            
            % execute the function
            for i=1:numTries
                if(~isProcedureCanceled)
                    try
                        if( iscell(testParamStruct(testIndex).TestFunction) )
                            testParamStruct(testIndex).results = feval(...
                                testParamStruct(testIndex).TestFunction{:});
                        else
                            testParamStruct(testIndex).results = feval(...
                                testParamStruct(testIndex).TestFunction);
                            testParamStruct(testIndex).TestFunction;
                        end
                    catch
                        testParamStruct(testIndex).results = 0;
                    end
                end
                if(~isProcedureCanceled)
                    % break if passed before the end of the loop
                    if testParamStruct(testIndex).results == 1
                        break;
                    else
                        if i<numTries
                            % Retry message
                            if strcmp(questdlg(...
                                    'Retry test?','Retry Question',...
                                    'Yes','No',...
                                    'Yes'),'No')
                                break;
                            end
                        end
                    end
                end
            end
            if(~isProcedureCanceled)
                testParamStruct(testIndex).testComplete = true;
                % check the results
                switch(testParamStruct(testIndex).results)
                    case PASS
                        set(testParamStruct(testIndex).textHandle,...
                            'background','green');
                    case SKIP % skipped
                        set(testParamStruct(testIndex).textHandle,...
                            'background','yellow');
                    case WARNING % slow speed
                        set(testParamStruct(testIndex).textHandle,...
                            'background','yellow');
                    otherwise
                        set(testParamStruct(testIndex).textHandle,...
                            'background','red');
                end
            end
            
        end
        if(~isProcedureCanceled)
            % reenable mainbutton
            set(guiHandles.mainButtonInfo,'style','pushbutton');
            
            % Check if this was the last test.  Analyse results
            if testIndex<length(testParamStruct)
                updateProcedureCallback;
            else
                
                if(realData)
                    % If i got here text succeeded
                    reset(hgs); % clear haptic data
                    comm(hgs,'watchdog','OFF');
                    comm(hgs,'burr','DISABLE');
                else
                    % skip burr disable
                end
                
                resultsCallback;
                set(guiHandles.figure,'CloseRequestFcn',@burrCheck_exit);
                
            end
        end
    end
%--------------------------------------------------------------------------
% internal function to get tip position from robot
%--------------------------------------------------------------------------
    function [tipPosition,tipTransform] = getTipPosition
        tipTransform = reshape(hgs.flange_tx,4,4)' * endEffectorTransform;
        tipPosition = tipTransform(1:3,4)';
    end
%--------------------------------------------------------------------------
% Internal function to check communication with Anspach
%--------------------------------------------------------------------------
    function testResult = handpieceCheck(varargin)
        try
            
            % init progress and status
            setStatusOn();
            setProgressOn();
            set(progressBar,...
                'XData',[0 0 0 0]);
            drawnow;
            
            if(realData)
                %set gravity knee
                comm(hgs,'set_gravity_constants','KNEE');
                
                % set robot to gravity mode
                reset(hgs);
                
                % check if irrigation is already set to max
                % if so skip this section
                peripheralData=commDataPair(hgs,'get_peripheral_state');
                
                if (peripheralData.cutter_drip~=8)
                    updateMainButtonInfo(guiHandles,'Resetting Cutter... Please wait','text');
                    % also reset the Anspach
                    comm(hgs,'burr','POWER_OFF');
                    pause(.5);
                    comm(hgs,'burr','DISABLE');
                    pause(4);
                    
                    % setup irrigation to max
                    comm(hgs,'peripheral_comm','CUTTER_DRIP_SWITCH');
                    for i=1:10
                        comm(hgs,'peripheral_comm','CUTTER_DRIP_UP');
                        pause(.05);
                    end
                end
                
                %check if cutter is configured
                peripheralData=commDataPair(hgs,'get_peripheral_state');
                if peripheralData.cutter_drip~=8
                    testParamStruct(testIndex).failureMsg = 'Unable to set irrigation';
                    testResult = FAILURE;
                    continueTest = false;
                end
                
                %get into the routine where user has to press the
                %flashing green button
                robotFrontPanelEnable(hgs,guiHandles);
                
                % create a huge cube to allow burr to be turned on
                createHapticCube();
            else
                % skip setup
            end
            
            
        catch err
            testParamStruct(testIndex).failureMsg = err.message;
            testResult = FAILURE;
        end
        
        %------------------------------------------------------------------
        % Nested function to indicate test completion
        %------------------------------------------------------------------
        function anspachCheckComplete(varargin)
            continueTest = true;
        end
        function skipAnspachTest(varargin)
            skipAnspach = true;
            continueTest = true;
        end
        try
            %init speed to 0
            maxRPM = 0;
            passedTest = false;
            triggered = false;
            RPM = [0];
            
            if(realData)
                % set to hand control
                comm(hgs,'peripheral_comm',peripheral_hand);
                pause(1);
                comm(hgs,'watchdog','ON');
                comm(hgs,'burr','ENABLE');
            else
                % skip hand command and burr enable
            end
            
            % tell user to press footpedal
            timeLoop = 0;
            timeoutTap = 30;
            
            % wait for any indication of speed increase
            continueTest = false;
            loopTic = tic;
            
            % test user how to complete
            set(anspachStatus,...
                'String',['TIP: Tap hand piece after prompt, holding down before prompt will not activate!']);
            
            % make the mainbutton a pushbutton
            updateMainButtonInfo(guiHandles,'pushbutton');
            
            while (~continueTest)
                if(realData)
                    currentAnspach = commDataPair(hgs,'get_peripheral_state');
                    cutterRPM = currentAnspach.cutter_rpm;
                else
                    cutterRPM = simulate.hand.startRPM;
                end
                maxRPM = max(maxRPM,cutterRPM);
                RPM(length(RPM)+1) = cutterRPM;
                
                if(maxRPM > minStartRPM)
                    handFlag = true;
                end
                
                timeLoop = toc(loopTic);
                
                buttonText = sprintf('Tap handpiece to begin (%1.0f seconds) ... (Click here to SKIP)',double(timeoutTap-timeLoop));
                % just update the text
                updateMainButtonInfo(guiHandles,...
                    buttonText,...
                    @skipAnspachTest);
                if(isProcedureCanceled)
                    return
                end
                pause(0.05); % pause after pushbutton update
                
                if(timeLoop > timeoutTap || handFlag == true)
                    if( handFlag == true )
                        continueTest = true;
                    else
                        % burr did not start
                        if(realData)
                            comm(hgs,'watchdog','OFF');
                            comm(hgs,'burr','DISABLE');
                        else
                            % skip burr disable
                        end
                        handFlag = false;
                        [testResult testParamStruct] = setSpeedSlowWarning(testParamStruct,testIndex,0);
                        setStatusOff();
                        setProgressOff();
                        return
                    end
                end
            end
            
            if(~skipAnspach)
                
                % wait for speed > requirement
                
                timeLoop = 0;
                continueTest = false;
                loopTic = tic;
                
                updateMainButtonInfo(guiHandles,'text',...
                    sprintf('Hold handpiece (%1.0f seconds) ... (Testing motor speed)',double(timeoutHold-timeLoop)),...
                    @anspachCheckComplete);
                
                triggeredTime = 0;
                while (~continueTest)
                    if(realData)
                        currentAnspach = commDataPair(hgs,'get_peripheral_state');
                        cutterRPM = currentAnspach.cutter_rpm;
                    else
                        cutterRPM = simulate.hand.runRPM;
                        pause(0.1); % pause to mimic read time
                    end
                    maxRPM = max(maxRPM,cutterRPM);
                    RPM(length(RPM)+1) = cutterRPM;
                    
                    set(anspachStatus,...
                        'String',['Burr speed: ' num2str(cutterRPM) ' rpm / ' num2str(nominalRPM) ]);
                    pause(0.05);
                    timeLoop = toc(loopTic);
                    updateMainButtonInfo(guiHandles,'text',...
                        sprintf('Hold handpiece (%1.0f seconds) ... (Testing motor speed)',double(timeoutHold-timeLoop)),...
                        @anspachCheckComplete);
                    
                    if(isProcedureCanceled)
                        return
                    end
                    
                    % update progress bar
                    ratio = timeLoop/timeoutHold;
                    ratio = max(0,ratio);
                    ratio = min(1,ratio);
                    set(progressBar,...
                        'XData',[0 ratio ratio 0]);
                    drawnow;
                    
                    % start timing
                    if( cutterRPM > requiredRPM && ~triggered )
                        % never enter this loop again until 0'd out
                        triggered = true;
                        % start timer
                        triggeredTic = tic;
                    elseif( triggered && cutterRPM == 0 )
                        triggeredTime = toc(triggeredTic);
                        % reset timer
                        triggeredTic = tic;
                        % reset trigger
                        triggered = false;
                    elseif( cutterRPM > requiredRPM && triggered );
                        triggeredTime = toc(triggeredTic);
                    else
                        %wait until speed up
                    end
                    
                    % set colors
                    if( triggeredTime > requiredTriggerTime || passedTest )
                        passedTest = true;
                    end
                    
                    if(timeLoop > timeoutHold)
                        %triggeredTime
                        %requiredTriggerTime
                        if( passedTest == true )
                            continueTest = true;
                        else
                            % speed not achieved
                            handFlag = false;
                            [testResult testParamStruct] = setSpeedSlowWarning(testParamStruct,testIndex,mean(RPM));
                            if(realData)
                                comm(hgs,'watchdog','OFF');
                            else
                                % skip watchdog
                            end
                            setStatusOff();
                            setProgressOff();
                            return
                        end
                    end
                end
            end
            
            if(realData)
                comm(hgs,'watchdog','OFF');
                comm(hgs,'burr','DISABLE');
            else
                % skip burr disable
            end
            
            
            if(~skipAnspach)
                % If i got here text succeeded
                testResult = PASS;
            else
                % test skipped
                % generate warning
                testResult = SKIP;
                testParamStruct(testIndex).warningMsg = 'skipped';
                testParamStruct(testIndex).errorMsg = 'skipped';
            end
            
            setStatusOff();
            setProgressOff();
            
        catch err
            testParamStruct(testIndex).failureMsg = err.message;
            testResult = FAILURE;
            setStatusOff();
            setProgressOff();
        end
        
        function [testResult, testParamStruct] = setSpeedSlowWarning(testParamStruct,testIndex,RPM)
            testResult = WARNING; % generate warning
            val = (floor(RPM/1000.0)); % divide by 1000 cast to int
            val = max(val,0); % min is 0
            val = min(val,nominalRPM); % max is nominalRPM
            testParamStruct(testIndex).errorMsg = sprintf('speed insufficient (%i/%i) kRPM',val,nominalRPM/1000.0);
            testParamStruct(testIndex).warningMsg = testParamStruct(testIndex).errorMsg;
            
        end
        
    end

%--------------------------------------------------------------------------
% Internal function to check communication with Anspach
%--------------------------------------------------------------------------
    function testResult = footpedalCheck(varargin)
        try
            
            % init progress and status
            setStatusOn();
            setProgressOn();
            set(progressBar,...
                'XData',[0 0 0 0]);
            drawnow;
            
            if(realData)
                % set gravity knee
                comm(hgs,'set_gravity_constants','KNEE');
                
                % set robot to gravity mode
                reset(hgs);
                
                % check if irrigation is already set to max
                % if so skip this section
                peripheralData=commDataPair(hgs,'get_peripheral_state');
                
                if (peripheralData.cutter_drip~=8)
                    updateMainButtonInfo(guiHandles,'Resetting Cutter... Please wait','text');
                    % also reset the Anspach
                    comm(hgs,'burr','POWER_OFF');
                    pause(.5);
                    comm(hgs,'burr','DISABLE');
                    pause(4);
                    
                    % setup irrigation to max
                    comm(hgs,'peripheral_comm','CUTTER_DRIP_SWITCH');
                    for i=1:10
                        comm(hgs,'peripheral_comm','CUTTER_DRIP_UP');
                        pause(.05);
                    end
                end
                
                %check if cutter is configured
                peripheralData=commDataPair(hgs,'get_peripheral_state');
                if peripheralData.cutter_drip~=8
                    testParamStruct(testIndex).failureMsg = 'Unable to set irrigation';
                    testResult = FAILURE;
                    continueTest = false;
                end
                
                %get into the routine where user has to press the
                %flashing green button
                robotFrontPanelEnable(hgs,guiHandles);
                
                % create a huge cube to allow burr to be turned on
                createHapticCube();
            else
                % skip setup
            end
            
        catch err
            testParamStruct(testIndex).failureMsg = err.message;
            testResult = FAILURE;
        end
        
        %------------------------------------------------------------------
        % Nested function to indicate test completion
        %------------------------------------------------------------------
        function footPedalCheckComplete(varargin)
            continueTest = true;
        end
        function skipFootpedalTest(varargin)
            skipFootpedal = true;
            continueTest = true;
        end
        
        try
            
            % init speed to zero
            maxRPM = 0;
            triggered = false;
            passedTest = false;
            RPM = [0];
            
            if(realData)
                % set to foot control
                comm(hgs,'peripheral_comm',peripheral_foot);
                pause(1);
                comm(hgs,'watchdog','ON');
                comm(hgs,'burr','ENABLE');
            else
                % skip foot control burr enable
            end
            
            % tell user to press footpedal
            timeLoop = 0;
            timeoutTap = 30;
            
            % wait for any indication of speed increase
            continueTest = false;
            loopTic = tic;
            
            % tell user how to complete
            set(anspachStatus,...
                'String',['TIP: Tap foot pedal after prompt, holding down before prompt will not activate!']);
            
            % make the mainbutton a pushbutton
            updateMainButtonInfo(guiHandles,'pushbutton');
            
            while (~continueTest)
                if(isProcedureCanceled)
                    return
                end
                
                if(realData)
                    footpedal = get(hgs,'footpedal');
                    currentAnspach = commDataPair(hgs,'get_peripheral_state');
                    cutterRPM = currentAnspach.cutter_rpm;
                else
                    footpedal(2) = simulate.foot.pedal;
                    cutterRPM = simulate.foot.startRPM;
                end
                
                maxRPM = max(maxRPM,cutterRPM);
                RPM(length(RPM)+1) = cutterRPM;
                
                if(footpedal(2) == PRESSED && maxRPM > minStartRPM )
                    % pedal pressed
                    footFlag = true;
                end
                
                timeLoop = toc(loopTic);
                
                buttonText = sprintf('Tap pedal to begin (%1.0f seconds) ... (Click here to SKIP)',double(timeoutTap-timeLoop));
                updateMainButtonInfo(guiHandles,...
                    buttonText,...
                    @skipFootpedalTest);
                if(isProcedureCanceled)
                    return
                end
                pause(0.05); % pause after pushbutton update
                
                if(timeLoop > timeoutTap || footFlag == true)
                    if( footFlag == true )
                        continueTest = true;
                    else
                        % speed not achieved
                        if(realData)
                            comm(hgs,'watchdog','OFF');
                            comm(hgs,'burr','DISABLE');
                        else
                            % skip watchdog and burr disable
                        end
                        [testResult, testParamStruct] = setSpeedSlowWarning(testParamStruct,testIndex,0);
                        footFlag = false;
                        setStatusOff();
                        setProgressOff();
                        return
                    end
                end
            end
            
            if(~skipFootpedal)
                
                % wait for speed > requirement
                timeLoop = 0;
                continueTest = false;
                loopTic = tic;
                RPM = [0];
                triggeredTime = 0;
                
                while (~continueTest)
                    
                    if(realData)
                        currentAnspach = commDataPair(hgs,'get_peripheral_state');
                        cutterRPM = currentAnspach.cutter_rpm;
                    else
                        cutterRPM = simulate.foot.runRPM;
                    end
                    
                    maxRPM = max(maxRPM,cutterRPM);
                    RPM(length(RPM)+1) = cutterRPM;
                    
                    set(anspachStatus,...
                        'String',['Burr speed: ' num2str(cutterRPM) ' rpm / ' num2str(nominalRPM) ]);
                    pause(0.05);
                    timeLoop = toc(loopTic);
                    updateMainButtonInfo(guiHandles,'text',...
                        sprintf('Press footpedal (%1.0f seconds) ... (Tests motor speed)',double(timeoutHold-timeLoop)),...
                        @footPedalCheckComplete);
                    if(isProcedureCanceled)
                        return
                    end
                    
                    % update progress bar
                    ratio = timeLoop/timeoutHold;
                    ratio = max(0,ratio);
                    ratio = min(1,ratio);
                    set(progressBar,...
                        'XData',[0 ratio ratio 0]);
                    drawnow;
                    
                    % start timing
                    if( cutterRPM > requiredRPM && ~triggered )
                        % never enter this loop again until 0'd out
                        triggered = true;
                        % start timer
                        triggeredTic = tic;
                    elseif( triggered && cutterRPM == 0 )
                        triggeredTime = toc(triggeredTic);
                        % reset timer
                        triggeredTic = tic;
                        % reset trigger
                        triggered = false;
                    elseif( cutterRPM > requiredRPM && triggered );
                        triggeredTime = toc(triggeredTic);
                    else
                        %wait until speed up
                    end
                    
                    % set colors
                    if( triggeredTime > requiredTriggerTime || passedTest )
                        passedTest = true;
                    end
                    
                    if(timeLoop > timeoutHold)
                        %triggeredTime
                        %requiredTriggerTime
                        if( passedTest == true )
                            continueTest = true;
                        else
                            % test warning
                            footFlag = false;
                            [testResult, testParamStruct] = setSpeedSlowWarning(testParamStruct,testIndex,mean(RPM));
                            if(realData)
                                comm(hgs,'watchdog','OFF');
                            else
                                % skip watchdog off
                            end
                            setStatusOff();
                            setProgressOff();
                            return
                        end
                    end
                end
            end
            
            if(realData)
                comm(hgs,'watchdog','OFF');
                comm(hgs,'burr','DISABLE');
            else
                % skip watchdog and burr disable
            end
            
            if(~skipFootpedal)
                % If i got here text succeeded
                testResult = PASS;
            else
                % test skipped
                % generate warning
                testResult = SKIP;
                testParamStruct(testIndex).warningMsg = 'skipped';
                testParamStruct(testIndex).errorMsg = 'skipped';
            end
            
            setStatusOff();
            setProgressOff();
            
        catch err
            testParamStruct(testIndex).failureMsg = err.message;
            testResult = FAILURE;
            setStatusOff();
            setProgressOff();
        end
        
        function [testResult, testParamStruct] = setSpeedSlowWarning(testParamStruct,testIndex,RPM)
            testResult = WARNING; % generate warning
            val = (floor(RPM/1000.0)); % divide by 1000 cast to int
            val = max(val,0); % min is 0
            val = min(val,nominalRPM); % max is nominalRPM
            testParamStruct(testIndex).errorMsg = sprintf('speed insufficient (%i/%i) kRPM',val,nominalRPM/1000.0);
            testParamStruct(testIndex).warningMsg = testParamStruct(testIndex).errorMsg;
        end
        
    end


%--------------------------------------------------------------------------
% Internal function to create a haptic cube
%--------------------------------------------------------------------------
    function createHapticCube(varargin)
        vertices = [ -0.12 0.12 0.12 -0.12 -0.12 -0.10 -0.10 0.10 0.10 -0.10 ]*100;
        numVerts = length(vertices)/2;
        flateye = eye(4);
        [objPos, objTransform] = getTipPosition;
        
        hapticObj = hgs_haptic(hgs,'extruded_2Dpoly___abcd',...
            'verts',vertices,...
            'numVerts',numVerts,...
            'stiffness',10000,...
            'damping',20.0,...
            'haptic_wrt_implant',flateye(:),...
            'obj_wrt_ref',objTransform,...
            'forceMax',80,...
            'torqueMax',4,...
            'constrPlaneGain',42,...
            'start_end_cap',[-2 2],...
            'constrPlaneNormal',[0.0 0.0 0.1],...
            'planarConstrEnable',0,...
            'safetyConstrEnable',0,...
            'safetyPlaneNormal',[0.0 0.0 1.0],...
            'safetyConstrDir',1,...
            'planarConstrDir',1 ...
            );
        
        mode(hgs,'haptic_interact',...
            'end_effector_tx',endEffectorTransform,...
            'vo_and_frame_list',hapticObj.name,...
            'burr_prereq_obj_name','extruded_2Dpoly___abcd',...
            'burr_prereq_var_name','hapticMode',...
            'burr_prereq_value',1);
        
    end
%--------------------------------------------------------------------------
% internal function: close GUI, overide the default cancel button callback
%--------------------------------------------------------------------------
    function burrcheck_close(varargin)
        %set phasing cancel flag
        isProcedureCanceled=true;
        try
            if(realData)
                reset(hgs); % clear haptic data
                mode(hgs,'zerogravity','ia_hold_enable',1);
                % If i got here text succeeded
                comm(hgs,'watchdog','OFF');
                comm(hgs,'burr','DISABLE');
            else
                % skip gravity and burr select
            end
            setStatusOff();
            setProgressOff();
        catch
        end
        
        log_message(hgs,'Burr Status Check script closed');
        
        % close the connection if it was established by this script
        if defaultRobotConnection
            close(hgs);
            closereq
            if isdeployed
                disp('Burr Status Check is in deploy mode. Closing script.')
                exit;
            end
        else
            closereq;
        end
    end

%--------------------------------------------------------------------------
% internal function: close GUI, overide the default exit button callback
%--------------------------------------------------------------------------
    function burrCheck_exit(varargin)
        %set procedure cancel flag
        isProcedureCanceled=true;
        try
            if(realData)
                reset(hgs); % clear haptic data
                mode(hgs,'zerogravity','ia_hold_enable',1);
                % If i got here text succeeded
                comm(hgs,'watchdog','OFF');
                comm(hgs,'burr','DISABLE');
            else
                % skip gravity and burr select
            end
            setStatusOff();
            setProgressOff();
        catch
        end
        
        log_message(hgs,'Burr Status Check script closed');
        
        % close the connection if it was established by this script
        if defaultRobotConnection
            close(hgs);
            closereq
            if isdeployed
                disp('Burr Status Check is in deploy mode. Closing script.')
                exit;
            end
        else
            closereq;
        end
        
    end
%--------------------------------------------------------------------------
% internal function: set status txt off
%--------------------------------------------------------------------------
    function setStatusOff()
        set(anspachStatus,'Visible','off')
        set(dispAxis,'Visible','off')
    end

%--------------------------------------------------------------------------
% internal function: set status txt on
%--------------------------------------------------------------------------
    function setStatusOn()
        set(anspachStatus,'Visible','on')
        set(dispAxis,'Visible','on')
    end

%--------------------------------------------------------------------------
% internal function: set progress bar and txt on
%--------------------------------------------------------------------------
    function setProgressOn()
        set(progressTxt,'Visible','on')
        set(progressBar,'Visible','on')
    end

%--------------------------------------------------------------------------
% internal function: set progress bar and txt off
%--------------------------------------------------------------------------
    function setProgressOff()
        set(progressTxt,'Visible','off')
        set(progressBar,'Visible','off')
    end

end

%
%
% --------- END OF FILE ----------
